import datetime
import os
import sys

import speech_recognition as sr

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
from control.led_config import MIC_INDEX

from control.led_control import toggle_led, turn_off_led, turn_on_led

# T·∫°o th∆∞ m·ª•c logs n·∫øu ch∆∞a t·ªìn t·∫°i
LOG_DIR = os.path.join(os.path.dirname(os.path.dirname(__file__)), "logs")
os.makedirs(LOG_DIR, exist_ok=True)
LOG_FILE = os.path.join(LOG_DIR, "speech_log.txt")


def log_speech(text):
    """Ghi n·ªôi dung nh·∫≠n di·ªán v√†o file"""
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(LOG_FILE, "a", encoding="utf-8") as file:
        file.write(f"[{timestamp}] {text}\n")


def recognize_speech():
    """Nh·∫≠n di·ªán gi·ªçng n√≥i v√† tr·∫£ v·ªÅ vƒÉn b·∫£n"""
    recognizer = sr.Recognizer()

    try:
        with sr.Microphone(device_index=MIC_INDEX) as source:
            print("ƒêang l·∫Øng nghe...")
            # ƒêi·ªÅu ch·ªânh ƒë·ªô nh·∫°y c·ªßa microphone
            recognizer.adjust_for_ambient_noise(source, duration=1)
            print("B·∫Øt ƒë·∫ßu n√≥i...")
            try:
                # TƒÉng timeout l√™n 10 gi√¢y
                audio = recognizer.listen(source, timeout=10, phrase_time_limit=5)
                print("ƒê√£ ghi √¢m xong, ƒëang x·ª≠ l√Ω...")
            except sr.WaitTimeoutError:
                print("Kh√¥ng ph√°t hi·ªán gi·ªçng n√≥i trong th·ªùi gian ch·ªù")
                log_speech("[Kh√¥ng ph√°t hi·ªán gi·ªçng n√≥i]")
                return ""

        try:
            text = recognizer.recognize_google(audio, language="vi-VN")
            print(f"ƒê√£ nh·∫≠n di·ªán ƒë∆∞·ª£c: '{text}'")
            log_speech(text)
            return text.lower()
        except sr.UnknownValueError:
            print("Kh√¥ng th·ªÉ nh·∫≠n di·ªán ƒë∆∞·ª£c gi·ªçng n√≥i")
            log_speech("[Kh√¥ng th·ªÉ nh·∫≠n di·ªán ƒë∆∞·ª£c gi·ªçng n√≥i]")
            return ""
        except sr.RequestError as e:
            print(f"L·ªói khi g·ª≠i y√™u c·∫ßu ƒë·∫øn Google Speech Recognition: {e}")
            log_speech(f"[L·ªói Google Speech Recognition: {e}]")
            return ""
    except Exception as e:
        print(f"L·ªói khi s·ª≠ d·ª•ng microphone: {e}")
        log_speech(f"[L·ªói microphone: {e}]")
        return ""


def process_command(text):
    """X·ª≠ l√Ω l·ªánh gi·ªçng n√≥i"""
    response = "Kh√¥ng hi·ªÉu l·ªánh"

    # X√°c ƒë·ªãnh ph√≤ng t·ª´ l·ªánh
    room = None
    if "ph√≤ng kh√°ch" in text:
        room = "led_phong_khach"
    elif "ph√≤ng ba m·∫π" in text or "ph√≤ng b·ªë m·∫π" in text or "ph√≤ng ng·ªß" in text:
        room = "led_phong_ba_me"
    elif "ph√≤ng con" in text or "ph√≤ng con trai" in text:
        room = "led_phong_con_trai"
    elif "b·∫øp" in text or "nh√† b·∫øp" in text:
        room = "led_bep"
    else:
        room = "led"  # M·∫∑c ƒë·ªãnh

    # X·ª≠ l√Ω h√†nh ƒë·ªông
    if "b·∫≠t ƒë√®n" in text or "m·ªü ƒë√®n" in text:
        response = turn_on_led(room)
    elif "t·∫Øt ƒë√®n" in text:
        response = turn_off_led(room)
    elif "chuy·ªÉn ƒë√®n" in text or "ƒë·∫£o ƒë√®n" in text:
        response = toggle_led(room)
    elif "t·∫Øt h·∫øt ƒë√®n" in text or "t·∫Øt t·∫•t c·∫£ ƒë√®n" in text:
        # T·∫Øt t·∫•t c·∫£ ƒë√®n
        responses = []
        for led_name in [
            "led",
            "led_phong_khach",
            "led_phong_ba_me",
            "led_phong_con_trai",
            "led_bep",
        ]:
            responses.append(turn_off_led(led_name))
        response = "ƒê√£ t·∫Øt t·∫•t c·∫£ ƒë√®n"
    elif "b·∫≠t h·∫øt ƒë√®n" in text or "b·∫≠t t·∫•t c·∫£ ƒë√®n" in text:
        # B·∫≠t t·∫•t c·∫£ ƒë√®n
        responses = []
        for led_name in [
            "led",
            "led_phong_khach",
            "led_phong_ba_me",
            "led_phong_con_trai",
            "led_bep",
        ]:
            responses.append(turn_on_led(led_name))
        response = "ƒê√£ b·∫≠t t·∫•t c·∫£ ƒë√®n"
    else:
        response = f"Kh√¥ng hi·ªÉu l·ªánh: '{text}'"

    log_speech(f"üëâ Ph·∫£n h·ªìi: {response}")  # Ghi ph·∫£n h·ªìi v√†o file log
    return response
